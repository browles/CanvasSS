'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CanvasSSRenderContext = function CanvasSSRenderContext(id) {
  _classCallCheck(this, CanvasSSRenderContext);

  this.id = id;
  this.x = 0;
  this.y = 0;
  this.offsetX = 0;
  this.offsetY = 0;
  this.width = 0;
  this.height = 0;
  this.time = -1;
  this.selectionTimes = {};
  this.data = {};
};

var CanvasSS = function () {
  _createClass(CanvasSS, null, [{
    key: 'id',
    value: function id(el) {
      if (el._canvasSSID == null) {
        el._canvasSSID = CanvasSS._elementID++;
      }
      return el._canvasSSID;
    }
  }, {
    key: 'registerLayer',
    value: function registerLayer(layer) {
      CanvasSS.layers.push(layer);
    }
  }, {
    key: 'renderLayers',
    value: function renderLayers() {
      var time = arguments.length <= 0 || arguments[0] === undefined ? performance.now() : arguments[0];

      for (var i = 0; i < CanvasSS.layers.length; i++) {
        var layer = CanvasSS.layers[i];
        if (layer.running) {
          layer.render(time);
        }
      }
    }
  }, {
    key: 'start',
    value: function start() {
      if (CanvasSS.running) return;
      CanvasSS.running = true;
      CanvasSS.loop();
    }
  }, {
    key: 'stop',
    value: function stop() {
      CanvasSS.running = false;
    }
  }, {
    key: 'loop',
    value: function loop(time) {
      if (!CanvasSS.running) return;
      CanvasSS.renderLayers(time);
      requestAnimationFrame(CanvasSS.loop);
    }
  }]);

  function CanvasSS(container, canvas) {
    var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var _ref$pixelRatio = _ref.pixelRatio;
    var pixelRatio = _ref$pixelRatio === undefined ? 1 : _ref$pixelRatio;

    _classCallCheck(this, CanvasSS);

    this.container = container;
    this.canvas = canvas;
    this.context = this.canvas.getContext('2d');
    this.pixelRatio = pixelRatio;

    this.containerX = null;
    this.containerY = null;
    this.canvasX = 0;
    this.canvasY = 0;
    this.width = 0;
    this.height = 0;
    this.logicalWidth = 0;
    this.logicalHeight = 0;
    this.canvas.width = 0;
    this.canvas.height = 0;
    this.resetCanvas();

    this.prerender = null;
    this.postrender = null;

    this.prerenderPrograms = {};
    this.renderPrograms = {};
    this.postrenderPrograms = {};
    this.renderOptions = {};
    this.renderCollections = {};
    this.renderContexts = {};
    this.selectors = [];

    this.running = true;
    this.time = 0;

    CanvasSS.registerLayer(this);
  }

  _createClass(CanvasSS, [{
    key: 'start',
    value: function start() {
      this.running = true;
    }
  }, {
    key: 'stop',
    value: function stop() {
      this.running = false;
    }
  }, {
    key: 'getRenderContext',
    value: function getRenderContext(el) {
      var id = CanvasSS.id(el);
      if (this.renderContexts[id] == null) {
        this.renderContexts[id] = new CanvasSSRenderContext(id);
        this.locateElement(el);
      }
      return this.renderContexts[id];
    }
  }, {
    key: 'select',
    value: function select(selector, program) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      if (this.selectors.indexOf(selector) < 0) {
        this.selectors.push(selector);
      }

      var renderOptions = {};
      Object.assign(renderOptions, CanvasSS.defaults, options);

      this.renderPrograms[selector] = program;
      this.renderOptions[selector] = renderOptions;
      this.renderCollections[selector] = this.renderCollections[selector] || [];
    }
  }, {
    key: 'deselect',
    value: function deselect(selector) {
      var index = this.selectors.indexOf(selector);
      if (index > -1) {
        this.selectors.splice(index, 1);
        this.prerenderPrograms[selector] = null;
        this.renderPrograms[selector] = null;
        this.postrenderPrograms[selector] = null;
        this.renderOptions[selector] = {};
        this.renderCollections[selector] = [];
      }
    }
  }, {
    key: 'collect',
    value: function collect(selector) {
      if (selector != null) {
        var queryResults = this.container.querySelectorAll(selector);
        var lastCollection = this.renderCollections[selector] || [];
        this.renderCollections[selector] = [];
        var seenElements = {};
        for (var i = 0; i < queryResults.length; i++) {
          var el = queryResults[i];
          var renderContext = this.getRenderContext(el);
          this.renderCollections[selector].push(el);
          if (renderContext.selectionTimes[selector] == null) {
            renderContext.selectionTimes[selector] = this.time;
          }
          seenElements[renderContext.id] = 1;
        }

        for (var i = 0; i < lastCollection.length; i++) {
          var el = lastCollection[i];
          var renderContext = this.getRenderContext(el);
          if (seenElements[renderContext.id] == null) {
            renderContext.selectionTimes[selector] = null;
          }
        }
      } else {
        for (var i = 0; i < this.selectors.length; i++) {
          var _selector = this.selectors[i];
          var renderOptions = this.renderOptions[_selector];
          if (renderOptions.collection) {
            this.collect(_selector);
          }
        }
      }
    }
  }, {
    key: 'locateElement',
    value: function locateElement(el, lazy) {
      var renderContext = this.getRenderContext(el);
      if (!lazy || renderContext.time !== this.time) {
        var elBCR = el.getBoundingClientRect();
        renderContext.x = elBCR.left - this.canvasX;
        renderContext.y = elBCR.top - this.canvasY;
        renderContext.offsetX = elBCR.left - this.containerX;
        renderContext.offsetY = elBCR.top - this.containerY;
        renderContext.width = elBCR.right - elBCR.left;
        renderContext.height = elBCR.bottom - elBCR.top;
        renderContext.time = this.time;
      }
    }
  }, {
    key: 'locateStaticElement',
    value: function locateStaticElement(el, lazy) {
      var renderContext = this.getRenderContext(el);
      if (!lazy || renderContext.time !== this.time) {
        renderContext.x = renderContext.offsetX + this.containerX - this.canvasX;
        renderContext.y = renderContext.offsetY + this.containerY - this.canvasY;
        renderContext.time = this.time;
      }
    }
  }, {
    key: 'locate',
    value: function locate(selector, lazy) {
      if (selector != null) {
        var renderOptions = this.renderOptions[selector];
        var collection = this.renderCollections[selector] || [];
        if (renderOptions.location === 'static') {
          for (var i = 0; i < collection.length; i++) {
            this.locateStaticElement(collection[i], lazy);
          }
        } else {
          for (var i = 0; i < collection.length; i++) {
            this.locateElement(collection[i], lazy);
          }
        }
      } else {
        for (var i = 0; i < this.selectors.length; i++) {
          var _selector2 = this.selectors[i];
          var renderOptions = this.renderOptions[_selector2];
          if (renderOptions.location) {
            this.locate(_selector2, lazy);
          }
        }
      }
    }
  }, {
    key: 'resetCanvas',
    value: function resetCanvas() {
      var canvasBCR = this.canvas.getBoundingClientRect();
      var containerBCR = this.container.getBoundingClientRect();
      this.canvasX = canvasBCR.left;
      this.canvasY = canvasBCR.top;
      this.containerX = containerBCR.left;
      this.containerY = containerBCR.top;

      var canvasWidth = this.pixelRatio * (canvasBCR.right - canvasBCR.left);
      var canvasHeight = this.pixelRatio * (canvasBCR.bottom - canvasBCR.top);
      if (this.width !== canvasWidth || this.height !== canvasHeight) {
        this.width = canvasWidth;
        this.height = canvasHeight;
        this.logicalWidth = canvasWidth / this.pixelRatio;
        this.logicalHeight = canvasHeight / this.pixelRatio;
        this.canvas.width = canvasWidth;
        this.canvas.height = canvasHeight;
        this.context.scale(this.pixelRatio, this.pixelRatio);
      } else {
        this.context.clearRect(0, 0, this.width, this.height);
      }
    }
  }, {
    key: 'render',
    value: function render(time) {
      if (time != null) this.time = time;

      this.resetCanvas();
      this.collect();
      this.locate(null, true);

      var ctx = this.context;

      if (this.prerender) {
        this.prerender(ctx);
      }

      for (var i = 0; i < this.selectors.length; i++) {
        var selector = this.selectors[i];
        var renderProgram = this.renderPrograms[selector];
        var renderOptions = this.renderOptions[selector];
        var renderCollection = this.renderCollections[selector];

        if (this.prerenderPrograms[selector]) {
          this.prerenderPrograms[selector](ctx);
        }

        for (var j = 0; j < renderCollection.length; j++) {
          var el = renderCollection[j];
          var renderContext = this.getRenderContext(el);

          var _getRenderContext = this.getRenderContext(el);

          var x = _getRenderContext.x;
          var y = _getRenderContext.y;
          var width = _getRenderContext.width;
          var height = _getRenderContext.height;

          renderContext.time = this.time;

          if (renderOptions.clip && !renderOptions.clip.invert) {
            if (x > this.logicalWidth || y > this.logicalHeight || x + width < 0 || y + height < 0) continue;
          }

          ctx.save();
          ctx.translate(x, y);
          ctx.beginPath();
          if (renderOptions.clip) {
            var clip = renderOptions.clip;
            var p = clip.padding || 0;
            if (clip.borderRadius) {
              var r = Math.min(clip.borderRadius, height / 2, width / 2);
              ctx.moveTo(r, p);
              ctx.lineTo(width - r, p);
              ctx.arc(width - r, r, r - p, 3 * Math.PI / 2, 0);
              ctx.lineTo(width - p, height - r);
              ctx.arc(width - r, height - r, r - p, 0, Math.PI / 2);
              ctx.lineTo(r, height - p);
              ctx.arc(r, height - r, r - p, Math.PI / 2, Math.PI);
              ctx.lineTo(p, r);
              ctx.arc(r, r, r - p, Math.PI, 3 * Math.PI / 2);
            } else {
              ctx.rect(p, p, width - 2 * p, height - 2 * p);
            }
            if (clip.invert) {
              ctx.rect(this.logicalWidth - x, -y, -this.logicalWidth, this.logicalHeight);
            }
            ctx.clip();
            ctx.closePath();
            ctx.beginPath();
          }
          renderProgram(ctx, renderContext, el);
          ctx.closePath();
          ctx.restore();
        }

        if (this.postrenderPrograms[selector]) {
          this.postrenderPrograms[selector](ctx);
        }
      }

      if (this.postrender) {
        this.postrender(ctx);
      }
    }
  }, {
    key: 'onPrerender',
    value: function onPrerender(selector, f) {
      if (typeof selector === 'function') {
        this.prerender = selector;
      } else this.prerenderPrograms[selector] = f;
    }
  }, {
    key: 'onPostrender',
    value: function onPostrender(selector, f) {
      if (typeof selector === 'function') {
        this.postrender = selector;
      } else this.postrenderPrograms[selector] = f;
    }
  }, {
    key: 'offPrerender',
    value: function offPrerender(selector) {
      if (typeof selector !== 'string') {
        this.prerender = null;
      } else this.prerenderPrograms[selector] = null;
    }
  }, {
    key: 'offPostrender',
    value: function offPostrender(selector) {
      if (typeof selector !== 'string') {
        this.postrender = null;
      } else this.postrenderPrograms[selector] = null;
    }
  }]);

  return CanvasSS;
}();

CanvasSS._elementID = 0;
CanvasSS.defaults = { clip: true, collection: true, location: true };
CanvasSS.layers = [];
CanvasSS.running = false;
CanvasSS.start();
